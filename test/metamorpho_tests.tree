
/* ONLY OWNER FUNCTIONS */


.
└── setCurator(address newCurator) external
    ├── when msg.sender not owner
    │   └── revert with NOT_OWNER
    └── when msg.sender is owner
        ├── when newCurator == curator
        │   └── revert with AlreadySet()
        └── when newCurator != curator
            ├── it should set curator to newCurator
            └── it should emit SetCurator(newCurator)

.
└── setIsAllocator(address newAllocator, bool newIsAllocator) external
    ├── when msg.sender not owner
    │   └── revert with NOT_OWNER
    └── when msg.sender is owner
        ├── when _isAllocator[newAllocator] == newIsAllocator
        │   └── revert with AlreadySet()
        └── when _isAllocator[newAllocator] != newIsAllocator
            ├── it should set _isAllocator[newAllocator] to newIsAllocator
            └── it should emit SetIsAllocator(newAllocator, newIsAllocator)

.
└── setRewardsRecipient(address newRewardsRecipient) external
    ├── when msg.sender not owner
    │   └── revert with NOT_OWNER
    └── when msg.sender is owner
        ├── when newRewardsRecipient == rewardsRecipient
        │   └── revert with AlreadySet()
        └── when newRewardsRecipient != rewardsRecipient
            ├── it should set rewardsRecipient to newRewardsRecipient
            └── it shoud emit SetRewardsRecipient(newRewardsRecipient)

.
└── submitTimelock(uint256 newTimelock) external
    ├── when msg.sender not owner
    │   └── revert with NOT_OWNER
    └── when msg.sender is owner
        ├── when newTimelock > MAX_TIMELOCK
        │   └── revert with ABOVE_MAX_TIMELOCK
        ├── when newTimelock < MIN_TIMELOCK
        │   └── revert with BELOW_MAX_TIMELOCK
        └── when newTimelock <= MAX_TIMELOCK
            ├── when newTimelock == timelock
            │   └── revert with AlreadySet()
            └── when newTimelock != timelock
                ├── when newTimelock > timelock
                │   ├── it should set timelock to newTimelock
                │   ├── it should emit SetTimelock(newTimelock)
                │   └── it should delete pendingTimelock
                └── when newTimelock < timelock
                    ├── it should set pendingTimelock to PendingUint192(uint192(newTimelock), uint64(block.timestamp))
                    └── it should emit SubmitTimelock(newTimelock)

.
└── acceptTimelock() external
    ├── when pendingTimelock.submittedAt == 0
    │   └── revert with NoPendingValue()
    └── when pendingTimelock.submittedAt != 0
        ├── when block.timestamp < pendingTimelock.submittedAt + timelock
        │   └── revert with TimelockNotElapsed()
        └── when block.timestamp >= pendingTimelock.submittedAt + timelock
            ├── it should set timelock to pendingTimelock.value
            ├── it should emit SetTimelock(pendingTimelock.value)
            └── it should delete pendingTimelock

.
└── submitFee(uint256 newFee) external
    ├── when msg.sender not owner
    │   └── revert with NOT_OWNER
    └── when msg.sender is owner
        ├── when newFee > MAX_FEE
        │   └── revert with MAX_FEE_EXCEEDED
        └── when newFee <= MAX_FEE
            ├── when newFee == fee
            │   └── revert with AlreadySet()
            └── when newFee != fee
                ├── when newFee < fee
                │   ├── it should accrue fees
                │   ├── it should set fee to newFee
                │   ├── it should emit SetFee(newFee)
                │   └── it should delete pendingFee
                └── when newFee > fee
                    ├── it should set pendingFee to PendingUint192(uint192(newFee), uint64(block.timestamp))
                    └── it should emit SubmitFee(newFee)

.
└── acceptFee() external
    ├── when pendingFee.submittedAt == 0
    │   └── revert with NoPendingValue()
    └── when pendingFee.submittedAt != 0
        ├── when block.timestamp < pendingFee.submittedAt + timelock
        │   └── revert with TimelockNotElapsed()
        └── when block.timestamp >= pendingFee.submittedAt + timelock
            ├── it should accrue fees
            ├── it should set fee to pendingFee.value
            ├── it should emit SetFee(pendingFee.value)
            └── it should delete pendingFee

.
└── setFeeRecipient(address newFeeRecipient) external
    ├── when msg.sender not owner
    │   └── revert with NOT_OWNER
    └── when msg.sender is owner
        ├── when newFeeRecipient == feeRecipient
        │   └── revert with AlreadySet()
        └── when newFeeRecipient != feeRecipient
            ├── when newFeeRecipient == address(0) and fee != 0
            │   └── revert with ZeroFeeRecipient()
            └── when newFeeRecipient != address(0) or fee == 0
                ├── it should accrue fees
                ├── it should set feeRecipient to newFeeRecipient
                └── it shoud emit SetFeeRecipient(newFeeRecipient)

.
└── submitGuardian(address newGuardian) external
    ├── when msg.sender not owner
    │   └── revert with NOT_OWNER
    └── when msg.sender is owner
        ├── when newGuardian == guardian
        │   └── revert with AlreadySet()
        └── when newGuardian != guardian
            ├── when guardian == address(0)
            │   ├── it should set guardian to newGuardian
            │   ├── it should emit SetGuardian(newGuardian)
            │   └── it should delete pendingGuardian
            └── when guardian != address(0)
                ├── it should it should set pendingGuardian to PendingAddress(newGuardian, uint64(block.timestamp))
                └── it should emit SubmitGuardian(newGuardian)

.
└── acceptGuardian() external
    ├── when pendingGuardian.submittedAt == 0
    │   └── revert with NoPendingValue()
    └── when pendingGuardian.submittedAt != 0
        ├── when block.timestamp < pendingGuardian.submittedAt + timelock
        │   └── revert with TimelockNotElapsed()
        └── when block.timestamp >= pendingGuardian.submittedAt + timelock
            ├── it should set guardian to pendingGuardian
            ├── it should emit SetGuardian(pendingGuardian)
            └── it should delete pendingGuardian


/* ONLY CURATOR FUNCTIONS */


.
└── submitCap(MarketParams memory marketParams, uint256 newSupplyCap) external
    ├── when msg.sender not owner or curator
    │   └── revert with NotCuratorRole()
    └── when msg.sender is owner or curator
        ├── when marketParams.loanToken != asset()
        │   └── revert with InconsistentAsset()
        ├── when marketParams.loanToken == asset()
        └── it should compute id = marketParams.id()
            ├── when MORPHO.lastUpdate(id) == 0
            │   └── revert with MarketNotCreated()
            └── when MORPHO.lastUpdate(id) != 0
                ├── when newSupplyCap == supplyCap
                │   └── revert with AlreadySet()
                └── when newSupplyCap != supplyCap
                    ├── when newSupplyCap < supplyCap
                    │   ├── when newSupplyCap > 0 and marketConfig.withdrawRank == 0
                    │   │   ├── it should push id to supplyQueue
                    │   │   ├── it should push id to withdrawQueue
                    │   │   └── if withdrawQueue.length > MAX_QUEUE_SIZE
                    │   │       └── revert with MaxQueueSizeExceeded()
                    │   ├── it should set config[id].cap to newSupplyCap
                    │   ├── it should emit SetCap(id, newSupplyCap)
                    │   └── it should delete pendingCap[id]
                    └── when newSupplyCap > supplyCap
                        ├── it should it should set pendingCap[id] to PendingUint192(newSupplyCap.toUint192(), uint64(block.timestamp))
                        └── it should emit EventsLib.SubmitCap(id, newSupplyCap)

.
└── acceptCap(Id id) external
    ├── when pendingCap[id].submittedAt == 0
    │   └── revert with NoPendingValue()
    └── when pendingCap[id].submittedAt != 0
        ├── when block.timestamp < pendingCap[id].submittedAt + timelock
        │   └── revert with TimelockNotElapsed()
        └── when block.timestamp >= pendingCap[id].submittedAt + timelock
            ├── when supplyCap > 0 and marketConfig.withdrawRank == 0
            │   ├── it should push id to supplyQueue
            │   ├── it should push id to withdrawQueue
            │   ├── if supplyQueue.length > MAX_QUEUE_SIZE
            │   │   └── revert with MaxQueueSizeExceeded()
            │   └── if withdrawQueue.length > MAX_QUEUE_SIZE
            │       └── revert with MaxQueueSizeExceeded()
            ├── it should set config[id].cap to pendingCap[id].value
            ├── it should emit SetCap(id, pendingCap[id].value)
            └── it should delete pendingCap[id]


/* ONLY ALLOCATOR FUNCTIONS */


.
└── setSupplyQueue(Id[] calldata newSupplyQueue) external
    ├── when msg.sender not owner or curator or allocator
    │   └── revert with NotAllocatorRole()
    └── when msg.sender is owner or curator or allocator
        ├── when newSupplyQueue.length > MAX_QUEUE_SIZE
        │   └── revert with MaxQueueSizeExceeded()
        └── when newSupplyQueue.length <= MAX_QUEUE_SIZE
            ├── when some markets of newSupplyQueue have a zero cap
            │   └── revert with UnauthorizedMarket()
            └── when all the markets of newSupplyQueue have non zero cap
                ├── it should set supplyQueue to newSupplyQueue
                └── it shoud emit SetSupplyQueue(msg.sender, newSupplyQueue)

.
└── sortWithdrawQueue(uint256[] calldata indexes) external
    ├── when msg.sender not owner or curator or allocator
    │   └── revert with NotAllocatorRole()
    └── when msg.sender is owner or curator or allocator
        ├── when indexes contains a duplicate market
        │   ├── it should compute the id of the duplicate market
        │   └── revert with DuplicateMarket(id)
        └── when indexes does not contain duplicates
            ├── it should compute newWithdrawQueue
            ├── when markets of withdrawQueue are missing in newWithdrawQueue
            │   ├── when one of these markets has non zero cap or vault's supply
            │   │   ├── it should compute the id of this market
            │   │   └── revert with InvalidMarketRemoval(id)
            │   └── when all these markets have zero cap and zero vault's supply
            │       └── it should delete the withdrawRank of these markets
            ├── it should set withdrawQueue to newWithdrawQueue
            └── it shoud emit SetWithdrawQueue(msg.sender, newWithdrawQueue)

.
└── reallocate(MarketAllocation[] calldata withdrawn, MarketAllocation[] calldata supplied) external
    ├── external
    ├── when msg.sender not owner or curator or allocator
    │   └── revert with NotAllocatorRole()
    └── when msg.sender is owner or curator or allocator
        ├── for each market withdrawn[i] from withdrawn
        │   ├── it should withdraw withdrawn[i].assets or withdrawn[i].shares
        │   └── it should add the withdrawn amount to totalWithdrawn
        ├── for each market supplied[i] from supplied
        │   ├── if config[id].cap == 0
        │   │   └── revert with UnauthorizedMarket(id)
        │   ├── it should supply supplied[i].assets or supplied[i].shares
        │   ├── it should add the supplied amount to totalSupplied
        │   └── if supplyBalance(supplied[i].marketParams) > config[supplied[i].marketParams.id()].cap
        │       └── revert with SupplyCapExceeded(id)
        ├── when totalWithdrawn > totalSupplied
        │   └── it should add totalWithdrawn - totalSupplied to idle
        └── when totalWithdrawn <= totalSupplied
            └── it should compute idleSupplied = totalSupplied - totalWithdrawn
                ├── when idle < idleSupplied
                │   └── revert with InsufficientIdle()
                └── when idle >= idleSupplied
                    └── it should remove idleSupplied from idle


/* EXTERNAL */


.
└── transferRewards(address token) external
    ├── when rewardsRecipient == address(0)
    │   └── revert with ZERO_ADDRESS
    └── when rewardsRecipient != address(0)
        ├── it should compute amount = IERC20(token).balanceOf(address(this))
        ├── when token == asset()
        │   └── it should remove idle from amount
        ├── it should transfer amount of token from the the vault to rewardsRecipient
        └── it should emit TransferRewards(msg.sender, rewardsRecipient, token, amount)


/* ONLY GUARDIAN FUNCTIONS */


.
└── revokeTimelock() external
    ├── when msg.sender not guardian
    │   └── revert with NotGuardian()
    └── when msg.sender is guardian
        ├── it should emit RevokeTimelock(msg.sender, pendingTimelock)
        └── it should delete pendingTimelock

.
└── revokeCap(Id id) external
    ├── when msg.sender not guardian
    │   └── revert with NotGuardian()
    └── when msg.sender is guardian
        ├── it should emit RevokeCap(msg.sender, id, pendingCap[id])
        └── it should delete pendingCap[id]

.
└── revokeGuardian() external
    ├── when msg.sender not guardian
    │   └── revert with NotGuardian()
    └── when msg.sender is guardian
        ├── it should emit RevokeGuardian(msg.sender, pendingGuardian);
        └── it should delete pendingGuardian


/* PUBLIC */


.
└── isAllocator(address target) public view returns (bool)
    ├── when _isAllocator[target] == true or target == curator or target == owner
    │   └── it should return true
    └── when _isAllocator[target] == false and target != curator and target != owner
        └── it should return false


/* ERC4626 (PUBLIC) */


.
└── maxWithdraw(address owner) public view override(IERC4626, ERC4626) returns (uint256 assets)
    ├── it should compute (feeShares, newTotalAssets) = _accruedFeeShares()
    ├── it should compute newTotalSupply = totalSupply() + feeShares
    ├── it should compute assets = _convertToAssetsWithFeeAccrued(balanceOf(owner), newTotalSupply, newTotalAssets, Math.Rounding.Down)
    ├── when idle >= assets
    │   └── it should return assets
    ├── when idle < assets
    │   ├── it should compute remaining = assets - idle
    │   └── for each market withdrawQueue[i] in withdrawQueue
    │       ├── it should compute id = withdrawQueue[i]
    │       ├── it should remove _withdrawable(_marketParams(id), id) from remaining
    │       └── if remaining == 0
    │           └── it should return assets
    └── it should return assets - remaining

.
└── maxRedeem(address owner) public view override(IERC4626, ERC4626) returns (uint256)
    ├── it should compute (feeShares, newTotalAssets) = _accruedFeeShares()
    ├── it should compute newTotalSupply = totalSupply() + feeShares
    ├── it should compute assets = _convertToAssetsWithFeeAccrued(balanceOf(owner), newTotalSupply, newTotalAssets, Math.Rounding.Down)
    ├── when idle >= assets
    │   └── it should return _convertToSharesWithFeeAccrued(assets, newTotalSupply, newTotalAssets, Math.Rounding.Down)
    ├── when idle < assets
    │   ├── it should compute remaining = assets - idle
    │   └── for each market withdrawQueue[i] in withdrawQueue
    │       ├── it should compute id = withdrawQueue[i]
    │       ├── it should remove _withdrawable(_marketParams(id), id) from remaining
    │       └── if remaining == 0
    │           └── it should return _convertToSharesWithFeeAccrued(assets, newTotalSupply, newTotalAssets, Math.Rounding.Down)
    └── it should return _convertToSharesWithFeeAccrued(assets - remaining, newTotalSupply, newTotalAssets, Math.Rounding.Down)

.
└── deposit(uint256 assets, address receiver) public override(IERC4626, ERC4626) returns (uint256 shares)
    ├── it should accrue fees
    ├── it should compute shares = _convertToSharesWithFeeAccrued(assets, totalSupply(), newTotalAssets, Math.Rounding.Down)
    ├── it should transfer assets of token from the sender to the vault
    ├── it should mint the shares for the receiver
    ├── it should emit Deposit(caller, receiver, assets, shares)
    ├── for each market supplyQueue[i] in supplyQueue
    │   ├── it should compute toSupply = UtilsLib.min(_suppliable(marketParams, id), assets)
    │   ├── when toSupply > 0
    │   │   ├── it should supply toSupply
    │   │   └── it should remove the supplied amount from assets
    │   └── if assets == 0
    │       └── it should stop supplying on new markets
    ├── it should add assets to idle
    ├── it should set lastTotalAssets to newTotalAssets + assets
    ├── it should emit UpdateLastTotalAssets(newTotalAssets + assets)
    └── it should return shares

.
└── mint(uint256 shares, address receiver) public override(IERC4626, ERC4626) returns (uint256 assets)
    ├── it should accrue fees
    ├── it should compute assets = _convertToAssetsWithFeeAccrued(shares, totalSupply(), newTotalAssets, Math.Rounding.Up)
    ├── it should transfer assets of token from the sender to the vault
    ├── it should mint the shares for the receiver
    ├── it should emit Deposit(caller, receiver, assets, shares)
    ├── for each market supplyQueue[i] in supplyQueue
    │   ├── it should compute toSupply = UtilsLib.min(_suppliable(marketParams, id), assets)
    │   ├── if toSupply > 0
    │   │   ├── it should supply toSupply
    │   │   └── it should remove the supplied amount from assets
    │   └── if assets == 0
    │       └── it should stop supplying on new markets
    ├── it should add assets to idle
    ├── it should set lastTotalAssets to newTotalAssets + assets
    ├── it should emit UpdateLastTotalAssets(newTotalAssets + assets)
    └── it should return assets

.
└── withdraw(uint256 assets, address receiver, address owner) public override(IERC4626, ERC4626) returns (uint256 shares)
    ├── it should accrue fees
    ├── it should compute shares = _convertToSharesWithFeeAccrued(assets, totalSupply(), newTotalAssets, Math.Rounding.Up)
    ├── when idle >= assets
    │   └── it should remove assets from idle
    ├── when idle < assets
    │   ├── it should compute remaining = assets - idle
    │   ├── it should set idle to 0
    │   └── for each market withdrawQueue[i] in withdrawQueue
    │       ├── it should compute id = withdrawQueue[i]
    │       ├── it should compute toWithdraw = UtilsLib.min(_withdrawable(marketParams, id), remaining)
    │       ├── if toWithdraw > 0
    │       │   ├── it should withdraw toWithdraw
    │       │   └── it should remove toWithdraw from remaining
    │       └── if remaining == 0
    │           └── it should stop withdrawing on new markets
    ├── when remaining != 0
    │   └── revert with WithdrawMorphoFailed()
    └── when remaining == 0
        ├── it should transfer assets of token to the receiver
        ├── it should burn the shares of the receiver
        ├── it should emit Withdraw(caller, receiver, owner, assets, shares)
        ├── it should set lastTotalAssets to newTotalAssets - assets
        ├── it should emit UpdateLastTotalAssets(newTotalAssets - assets)
        └── it should return shares

.
└── redeem(uint256 shares, address receiver, address owner) public override(IERC4626, ERC4626) returns (uint256 shares)
    ├── it should accrue fees
    ├── it should compute assets = _convertToAssetsWithFeeAccrued(shares, totalSupply(), newTotalAssets, Math.Rounding.Down)
    ├── when idle >= assets
    │   └── it should remove assets from idle
    ├── when idle < assets
    │   ├── it should compute remaining = assets - idle
    │   ├── it should set idle to 0
    │   └── for each market withdrawQueue[i] in withdrawQueue
    │       ├── it should compute id = withdrawQueue[i]
    │       ├── it should compute toWithdraw = UtilsLib.min(_withdrawable(marketParams, id), remaining)
    │       ├── if toWithdraw > 0
    │       │   ├── it should withdraw toWithdraw
    │       │   └── it should remove toWithdraw from remaining
    │       └── if remaining == 0
    │           └── it should stop withdrawing on new markets
    ├── when remaining != 0
    │   └── revert with WithdrawMorphoFailed()
    └── when remaining == 0
        ├── it should transfer assets of token to the receiver
        ├── it should burn the shares of the receiver
        ├── it should emit Withdraw(caller, receiver, owner, assets, shares)
        ├── it should set lastTotalAssets to newTotalAssets - assets
        ├── it should emit UpdateLastTotalAssets(newTotalAssets - assets)
        └── it should return assets

.
└── totalAssets() public view override(IERC4626, ERC4626) returns (uint256 assets)
    ├── for each market withdrawQueue[i] in withdrawQueue
    │   └── it should add _supplyBalance(_marketParams(withdrawQueue[i])) to assets
    ├── it should add idle to assets
    └── it should return assets
